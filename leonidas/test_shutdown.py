#!/usr/bin/env python3
"""
Teste da funcionalidade de shutdown do Leonidas v2

Este script demonstra como o modelo pode se desligar quando solicitado pelo usuÃ¡rio
atravÃ©s da ferramenta shutdown_system.
"""

import asyncio
import os
import time
from unittest.mock import Mock, AsyncMock
from leonidas_v2 import LeonidasOrchestrator
from genai_processors import content_api
from google.genai import types as genai_types

async def test_shutdown_functionality():
    """Testa a funcionalidade de shutdown do sistema."""
    
    print("ðŸ§ª Testando funcionalidade de shutdown do Leonidas v2")
    print("=" * 60)
    
    # Mock API key para teste
    api_key = "test_api_key"
    
    # Criar orchestrator (sem conexÃ£o real com Gemini)
    orchestrator = LeonidasOrchestrator(api_key)
    
    # Simular chamada de funÃ§Ã£o shutdown_system
    print("1. Testando shutdown SEM confirmaÃ§Ã£o (deve ser negado)...")
    
    # Teste 1: Shutdown sem confirmaÃ§Ã£o
    response1 = await orchestrator._handle_shutdown_system(
        call_id="test_call_1",
        args={
            "confirmation": False,
            "reason": "Teste sem confirmaÃ§Ã£o"
        }
    )
    
    print(f"   Resposta: {response1.function_response.response}")
    print(f"   Status shutdown: {orchestrator.shutdown_requested}")
    print()
    
    # Teste 2: Shutdown com confirmaÃ§Ã£o
    print("2. Testando shutdown COM confirmaÃ§Ã£o (deve ser aceito)...")
    
    response2 = await orchestrator._handle_shutdown_system(
        call_id="test_call_2", 
        args={
            "confirmation": True,
            "reason": "UsuÃ¡rio solicitou encerramento do sistema"
        }
    )
    
    print(f"   Resposta: {response2.function_response.response}")
    print(f"   Status shutdown: {orchestrator.shutdown_requested}")
    print(f"   Motivo: {orchestrator.shutdown_reason}")
    print()
    
    # Teste 3: Verificar histÃ³rico da conversa
    print("3. Verificando histÃ³rico da conversa...")
    shutdown_entries = [
        entry for entry in orchestrator.conversation_history 
        if entry.get('metadata', {}).get('type') == 'shutdown'
    ]
    
    print(f"   Entradas de shutdown no histÃ³rico: {len(shutdown_entries)}")
    if shutdown_entries:
        for entry in shutdown_entries:
            print(f"   - {entry['text']}")
    print()
    
    # Teste 4: Verificar mÃ©tricas
    print("4. Verificando mÃ©tricas de uso de ferramentas...")
    print(f"   Chamadas da ferramenta shutdown_system: {orchestrator.metrics['tool_calls']['shutdown_system']}")
    print()
    
    print("âœ… Testes de shutdown concluÃ­dos com sucesso!")
    print("=" * 60)
    
    return orchestrator.shutdown_requested

async def simulate_user_interaction():
    """Simula uma interaÃ§Ã£o do usuÃ¡rio solicitando shutdown."""
    
    print("ðŸŽ­ Simulando interaÃ§Ã£o do usuÃ¡rio")
    print("=" * 60)
    
    # Simular diferentes tipos de solicitaÃ§Ã£o de shutdown
    user_requests = [
        "Por favor, desligue o sistema",
        "Pode encerrar o Leonidas?", 
        "Quero sair do programa",
        "Finalize a sessÃ£o",
        "Shutdown do sistema"
    ]
    
    print("Exemplos de solicitaÃ§Ãµes que deveriam ativar o shutdown:")
    for i, request in enumerate(user_requests, 1):
        print(f"   {i}. \"{request}\"")
    
    print()
    print("O modelo deveria:")
    print("   1. Usar a ferramenta 'think' para analisar a solicitaÃ§Ã£o")
    print("   2. Confirmar com o usuÃ¡rio se realmente quer desligar")
    print("   3. Usar 'shutdown_system' com confirmation=True")
    print("   4. Responder com mensagem de despedida")
    print("   5. O sistema detecta a flag e encerra graciosamente")
    print()

def demonstrate_integration():
    """Demonstra como a integraÃ§Ã£o funciona no sistema completo."""
    
    print("ðŸ”§ IntegraÃ§Ã£o com o sistema principal")
    print("=" * 60)
    
    print("No arquivo leonidas_v2.py, as seguintes modificaÃ§Ãµes foram feitas:")
    print()
    
    print("1. NOVA FERRAMENTA adicionada ao LEONIDAS_TOOLS:")
    print("   - shutdown_system: Permite ao modelo se desligar")
    print("   - Requer confirmaÃ§Ã£o explÃ­cita (confirmation=True)")
    print("   - Registra o motivo do shutdown")
    print()
    
    print("2. NOVO HANDLER no LeonidasOrchestrator:")
    print("   - _handle_shutdown_system(): Processa solicitaÃ§Ãµes de shutdown")
    print("   - Valida confirmaÃ§Ã£o antes de aceitar")
    print("   - Define flags shutdown_requested e shutdown_reason")
    print()
    
    print("3. MODIFICAÃ‡ÃƒO no loop principal (run_leonidas_v2):")
    print("   - Verifica periodicamente se shutdown foi solicitado")
    print("   - Encerra o loop graciosamente quando detectado")
    print("   - Exibe mensagem informativa ao usuÃ¡rio")
    print()
    
    print("4. COMPORTAMENTO ESPERADO:")
    print("   - UsuÃ¡rio: 'Por favor, desligue o sistema'")
    print("   - Leonidas: [usa think] -> [confirma] -> [usa shutdown_system]")
    print("   - Sistema: Detecta flag -> Encerra graciosamente")
    print()

async def main():
    """FunÃ§Ã£o principal de teste."""
    
    print("ðŸš€ TESTE COMPLETO DA FUNCIONALIDADE DE SHUTDOWN")
    print("=" * 80)
    print()
    
    # Executar testes
    await test_shutdown_functionality()
    print()
    
    await simulate_user_interaction()
    print()
    
    demonstrate_integration()
    print()
    
    print("ðŸ“‹ RESUMO:")
    print("âœ… Ferramenta shutdown_system implementada")
    print("âœ… Handler de shutdown funcional") 
    print("âœ… IntegraÃ§Ã£o com loop principal")
    print("âœ… ValidaÃ§Ã£o de confirmaÃ§Ã£o")
    print("âœ… Logging e histÃ³rico")
    print("âœ… Encerramento gracioso")
    print()
    
    print("ðŸŽ¯ PRÃ“XIMOS PASSOS:")
    print("1. Teste com Gemini Live API real")
    print("2. Verificar comportamento em diferentes cenÃ¡rios")
    print("3. Ajustar prompts se necessÃ¡rio para melhor UX")
    print()
    
    print("=" * 80)

if __name__ == "__main__":
    asyncio.run(main())